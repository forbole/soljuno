package vote_test

import (
	"fmt"

	"github.com/forbole/soljuno/modules/vote"
	clienttypes "github.com/forbole/soljuno/solana/client/types"
	voteProgram "github.com/forbole/soljuno/solana/program/vote"
)

func (suite *ModuleTestSuite) TestModule_UpdateVoteAccount() {
	testCases := []struct {
		name      string
		isLatest  bool
		account   clienttypes.AccountInfo
		shouldErr bool
	}{
		{
			name:     "skip updating returns no error",
			isLatest: true,
		},
		{
			name:     "receive empty account data and delete account properly",
			isLatest: false,
		},
		{
			name:     "fail to decode data returns error",
			isLatest: false,
			account: clienttypes.AccountInfo{
				Value: &clienttypes.AccountValue{
					Data: [2]string{"$invalid", "base64"},
				},
			},
			shouldErr: true,
		},
		{
			name:     "receive non valid account and delete account properly",
			isLatest: false,
			account: clienttypes.AccountInfo{
				Value: &clienttypes.AccountValue{
					Data:  [2]string{"dW5rbm93bg==", "base64"},
					Owner: "unknown",
				},
			},
		},
		{
			name:     "receive valid account and update account properly",
			isLatest: false,
			account: clienttypes.AccountInfo{
				Value: &clienttypes.AccountValue{
					Data:  [2]string{"AQAAAElFniOxic6SFmHGLHEOtebZhevbyiTVZIkb3SPlIcfsY+skleJmc/3ITI9/AuXqYw4K10Be6PIILZKSxuclUm4KHwAAAAAAAACE0dYHAAAAAB8AAACF0dYHAAAAAB4AAACG0dYHAAAAAB0AAACH0dYHAAAAABwAAACI0dYHAAAAABsAAACJ0dYHAAAAABoAAACK0dYHAAAAABkAAACL0dYHAAAAABgAAACN0dYHAAAAABcAAACO0dYHAAAAABYAAACP0dYHAAAAABUAAACQ0dYHAAAAABQAAACR0dYHAAAAABMAAACS0dYHAAAAABIAAACT0dYHAAAAABEAAACU0dYHAAAAABAAAACV0dYHAAAAAA8AAACW0dYHAAAAAA4AAACX0dYHAAAAAA0AAACY0dYHAAAAAAwAAACZ0dYHAAAAAAsAAACw0dYHAAAAAAoAAACx0dYHAAAAAAkAAACy0dYHAAAAAAgAAACz0dYHAAAAAAcAAAC00dYHAAAAAAYAAAC10dYHAAAAAAUAAAC20dYHAAAAAAQAAAC30dYHAAAAAAMAAAC40dYHAAAAAAIAAAC50dYHAAAAAAEAAAABg9HWBwAAAAABAAAAAAAAADABAAAAAAAASUWeI7GJzpIWYcYscQ615tmF69vKJNVkiRvdI+Uhx+wfAAAAAAAAAAEfAAAAAAAAABIBAAAAAAAApmEFAAAAAAAAAAAAAAAAABMBAAAAAAAAkwULAAAAAACmYQUAAAAAABQBAAAAAAAAzN8QAAAAAACTBQsAAAAAABUBAAAAAAAAgYAWAAAAAADM3xAAAAAAABYBAAAAAAAADBwcAAAAAACBgBYAAAAAABcBAAAAAAAA57whAAAAAAAMHBwAAAAAABgBAAAAAAAAnFcnAAAAAADnvCEAAAAAABkBAAAAAAAAosksAAAAAACcVycAAAAAABoBAAAAAAAAZyIyAAAAAACiySwAAAAAABsBAAAAAAAA4mo3AAAAAABnIjIAAAAAABwBAAAAAAAAl7g8AAAAAADiajcAAAAAAB0BAAAAAAAAO/tBAAAAAACXuDwAAAAAAB4BAAAAAAAAnGxHAAAAAAA7+0EAAAAAAB8BAAAAAAAAzplMAAAAAACcbEcAAAAAACABAAAAAAAAkS1SAAAAAADOmUwAAAAAACEBAAAAAAAA76lXAAAAAACRLVIAAAAAACIBAAAAAAAAvq5dAAAAAADvqVcAAAAAACMBAAAAAAAA86hjAAAAAAC+rl0AAAAAACQBAAAAAAAAJcZpAAAAAADzqGMAAAAAACUBAAAAAAAAxdpvAAAAAAAlxmkAAAAAACYBAAAAAAAA+Qx2AAAAAADF2m8AAAAAACcBAAAAAAAAiu17AAAAAAD5DHYAAAAAACgBAAAAAAAATkmBAAAAAACK7XsAAAAAACkBAAAAAAAAGCiGAAAAAABOSYEAAAAAACoBAAAAAAAAJleKAAAAAAAYKIYAAAAAACsBAAAAAAAAXHKPAAAAAAAmV4oAAAAAACwBAAAAAAAAiUKVAAAAAABcco8AAAAAAC0BAAAAAAAAU6yaAAAAAACJQpUAAAAAAC4BAAAAAAAAYG+gAAAAAABTrJoAAAAAAC8BAAAAAAAA8++lAAAAAABgb6AAAAAAADABAAAAAAAA0TOoAAAAAADz76UAAAAAALnR1gcAAAAAKQdpYgbase64"},
					Owner: voteProgram.ProgramID,
				},
			},
		},
	}

	for _, tc := range testCases {
		tc := tc
		suite.Run(tc.name, func() {
			db := suite.db.GetCached()
			db.WithLatest(tc.isLatest)

			client := suite.client.GetCached()
			client.WithAccount(tc.account)

			err := vote.UpdateVoteAccount("address", 1, &db, &client)
			if tc.shouldErr {
				suite.Require().Error(err)
			} else {
				suite.Require().NoError(err)
			}
		})
	}
}

func (suite *ModuleTestSuite) TestModule_UpdateValidatorsStatus() {
	err := vote.UpdateValidatorsStatus(suite.db, suite.client)
	suite.Require().NoError(err)

	// with error client returns error
	errClient := suite.client.GetCached()
	errClient.WithError(fmt.Errorf("error"))
	err = vote.UpdateValidatorsStatus(suite.db, &errClient)
	suite.Require().Error(err)

	// with error db returns error
	errDb := suite.db.GetCached()
	errDb.WithError(fmt.Errorf("error"))
	err = vote.UpdateValidatorsStatus(&errDb, suite.client)
	suite.Require().Error(err)
}

func (suite *ModuleTestSuite) TestModule_UpdateValidatorSkipRates() {
	err := vote.UpdateValidatorSkipRates(1, suite.db, suite.client)
	suite.Require().NoError(err)

	// with error client returns error
	errClient := suite.client.GetCached()
	errClient.WithError(fmt.Errorf("error"))
	err = vote.UpdateValidatorSkipRates(1, suite.db, &errClient)
	suite.Require().Error(err)

	// with error db returns error
	errDb := suite.db.GetCached()
	errDb.WithError(fmt.Errorf("error"))
	err = vote.UpdateValidatorSkipRates(1, &errDb, suite.client)
	suite.Require().Error(err)
}

func (suite *ModuleTestSuite) TestModule_GetSkipRateReference() {
	m := make(map[int]bool)
	m[0] = true
	total, skip := vote.GetSkipRateReference(1, m, []int{0, 1})
	suite.Require().Equal(2, total)
	suite.Require().Equal(1, skip)
}
